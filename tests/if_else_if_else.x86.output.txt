    ; assembly                               | /* r2dec pseudo C output */
                                             | #include <stdint.h>
                                             |
(fcn) main:                                  | int32_t main (int32_t arg1, int32_t arg2) {
                                             |     int32_t local_20h;
                                             |     int32_t local_14h;
                                             |     unsigned int local_4h;
    0x000005fa  push rbp                     |
    0x000005fb  mov rbp, rsp                 |
                                             |     /* arg1 */
    0x000005fe  mov dword [rbp - 0x14], edi  |     local_14h = edi;
                                             |     /* arg2 */
    0x00000601  mov qword [rbp - 0x20], rsi  |     local_20h = rsi;
    0x00000605  mov dword [rbp - 4], 0xdead  |     local_4h = 0xdead;
    0x0000060c  cmp dword [rbp - 4], 0xbeef  |
                                             |     if (local_4h != 0xbeef) {
    0x00000613  je 0x61e                     |
    0x00000615  mov dword [rbp - 4], 0xbeef  |         local_4h = 0xbeef;
    0x0000061c  jmp 0x637                    |
                                             |     }
                                             |     else {
    0x0000061e  cmp dword [rbp - 4], 0x9000  |
                                             |         if (local_4h != 0x9000) {
    0x00000625  je 0x630                     |
    0x00000627  mov dword [rbp - 4], 0x2345  |             local_4h = 0x2345;
    0x0000062e  jmp 0x637                    |
                                             |         }
                                             |         else {
    0x00000630  add dword [rbp - 4], 0x2000  |             local_4h += 0x2000;
                                             |         }
                                             |     }
    0x00000637  add dword [rbp - 4], 0x10    |     local_4h += 0x10;
    0x0000063b  mov eax, 0                   |     eax = 0;
    0x00000640  pop rbp                      |
    0x00000641  ret                          |     return eax;
                                             | }
